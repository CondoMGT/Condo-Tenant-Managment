generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum waitListType {
  Tenant
  Manager
}

model User {
  id       String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name     String?
  email    String? @unique
  password String?

  firstTimerLogin DateTime?

  phoneNumber String?
  image       String?

  emailVerified DateTime?

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  role UserRole @default(TENANT)

  tenant          Tenant?
  propertyManager PropertyManager?

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  maintenanceRequests MaintenanceRequest[]

  // notifications Notification[]
  accounts Account[]

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model PasswordResetToken {
  id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model waitlist {
  id       String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email    String       @unique
  userType waitListType @default(Manager)
}

model Tenant {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  unit String

  startDate DateTime?
  endDate   DateTime?
  userId    String    @unique @db.Uuid
  user      User      @relation(fields: [userId], references: [id])

  propertyId String   @db.Uuid
  property   Property @relation(fields: [propertyId], references: [id])
}

model OAuthInvittation {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  email String @unique

  unit String

  startDate DateTime?
  endDate   DateTime?

  propertyId String @db.Uuid
}

model MaintenanceRequest {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  reqId String @unique

  issue       String
  description String
  summary     String
  priority    RequestPriority

  status RequestStatus @default(New)

  category   String?
  contractor String? // Contractor ID

  maintenanceDate          DateTime?
  maintenanceCompletedDate DateTime?
  scheduledDate            DateTime?

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  propertyId String   @db.Uuid
  property   Property @relation(fields: [propertyId], references: [id])

  attachments       String?     @unique @db.Uuid
  requestAttachment Attachment? @relation("requestAttachment", fields: [attachments], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contractor {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  name        String
  companyName String

  specialty         String
  phoneNumber       String
  email             String
  licenseNumber     String
  yearsOfExperience Int
  serviceArea       String

  availability String[]
  emergency    Boolean
  rating       Float

  startHour Int @default(9)
  endHour   Int @default(17)

  insurance Boolean

  ratePerHour Int

  properties PropertyContractor[]

  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyContractor {
  contractor   Contractor @relation(fields: [contractorId], references: [id])
  contractorId String     @db.Uuid
  property     Property   @relation(fields: [propertyId], references: [id])
  propertyId   String     @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([contractorId, propertyId])
}

model Property {
  id           String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  propertyName String?
  address      String

  propertyManagerId String          @db.Uuid
  propertyManager   PropertyManager @relation(fields: [propertyManagerId], references: [id])

  tenants Tenant[]

  maintenanceRequests MaintenanceRequest[]

  contractors PropertyContractor[]
}

model PropertyManager {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  properties Property[]

  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
}

model Message {
  id         String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  senderId   String        @db.Uuid
  receiverId String        @db.Uuid
  content    String
  timestamp  DateTime      @default(now())
  status     MessageStatus
  isStarred  Boolean       @default(false)

  readBySender   Boolean @default(true) // Tracks if sender has read
  readByReceiver Boolean @default(false) // Tracks if receiver has read

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])

  attachments       String?     @unique @db.Uuid
  attachmentMessage Attachment? @relation("messageAttachment", fields: [attachments], references: [id])
}

model Attachment {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  attachments String[]

  messageAttachments Message?            @relation("messageAttachment")
  requestAttachments MaintenanceRequest? @relation("requestAttachment")
}

// model Notification {
//   id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   userId    String
//   messageId String
//   isRead    Boolean  @default(false)
//   createdAt DateTime @default(now())
// }

enum UserRole {
  MANAGER
  TENANT
  CONTRACTOR
}

enum RequestPriority {
  Low
  Medium
  High
}

enum RequestStatus {
  New
  Progress
  Closed
  Pending
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}
