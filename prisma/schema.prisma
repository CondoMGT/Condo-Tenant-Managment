generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum waitListType {
  Tenant
  Manager
}

model users {
  id       String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name     String
  email    String @unique
  password String

  phone_number String?
  image        String?

  role UserRole @default(TENANT)

  tenant          Tenant?
  propertyManager PropertyManager?

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  // notifications Notification[]
}

model waitlist {
  id       String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email    String       @unique
  userType waitListType @default(Manager)
}

model Tenant {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  // propertyManagerId String @db.Uuid

  userId String @unique @db.Uuid
  user   users  @relation(fields: [userId], references: [id])

  propertyId String   @unique @db.Uuid
  property   Property @relation(fields: [propertyId], references: [id])
}

model Property {
  id           String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  propertyName String?
  address      String

  propertyManagerId String          @db.Uuid
  propertyManager   PropertyManager @relation(fields: [propertyManagerId], references: [id])

  tenants Tenant[]
}

model PropertyManager {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  properties Property[]

  userId String @unique @db.Uuid
  user   users  @relation(fields: [userId], references: [id])
}

model Message {
  id         String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  senderId   String        @db.Uuid
  receiverId String        @db.Uuid
  content    String
  timestamp  DateTime      @default(now())
  status     MessageStatus
  isStarred  Boolean       @default(false)

  readBySender   Boolean @default(true) // Tracks if sender has read
  readByReceiver Boolean @default(false) // Tracks if receiver has read

  sender   users @relation("SentMessages", fields: [senderId], references: [id])
  receiver users @relation("ReceivedMessages", fields: [receiverId], references: [id])

  attachments       String?     @unique @db.Uuid
  attachmentMessage Attachment? @relation("messageAttachment", fields: [attachments], references: [id])
}

model Attachment {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  attachments String[]

  messageAttachments Message? @relation("messageAttachment")
}

// model Notification {
//   id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   userId    String
//   messageId String
//   isRead    Boolean  @default(false)
//   createdAt DateTime @default(now())
// }

enum UserRole {
  MANAGER
  TENANT
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}
